Usage of Training with MDP:

NOTE: 
new version has faster training and application phase, so that local machine can be used.
In this case: build.xml can still be used, but it now possible to call directly 
CompleteTest.java or the others.
Should run with 1g (or more)
   
Details by GN: July, 2014

A NOTE from AV from JULY, 2014:
	entweder das Lernverfahren (das richtige hieß glaub ich MCSVM_CS), oder die Parameter 
	(ich weiß nicht mehr welche ich hatte, aber ich glaube die müssten dokumentiert sein, oder die Splitting-Parameter 
	(die Größe der Dateien aus denen Modelle gelernt werden (hier weiß ich nicht mehr ob ich das dokumentiert habe)). 
	Das wären auf jeden Fall Schrauben an denen man drehen könnte beim Experimentieren. Insbesondere für andere Tasks als Parsing, 
	sind das auch immer wichtige Schrauben gewesen, 
	denn die Trainingsdaten für Parsing sind extrem groß und für andere Tasks hat man oft den umgekehrten Fall, dass man zu wenig Daten hat.

	
NOTES on DIRS:

During training temporary dirs are created so they have to be defined before hand:

	String[] dirs = {"split","splitA","splitF","splitO","splitC","splitModels","temp"};
	Archivator arch = new Archivator(modelFile,dirs);

After training they can be deleted !

However, during application the variable is still necessary but initialized as empty !

	String[] dirs = {};
	Archivator arch = new Archivator(modelFile,dirs);	
			
LibLinear settings used in:

de.dfki.lt.mdparser.parser.Trainer:

	private double    bias             = -1;
	private Problem   prob             = null;
	// solver, penalty C, epsilon Eps
	private Parameter param = new Parameter(SolverType.MCSVM_CS, 0.1, 0.3);
	
de.dfki.lt.mdparser.parser.CompactiseWorkerThread
	private Parameter param = new Parameter(SolverType.MCSVM_CS, 0.1, 0.3);
	
-> overwrites value parameter initialized in trainer !

Trainingsdaten:
-	aktuell habe ich nur positive Trees
-	brauche ich negative ? Wo kommen die her ?